%--------------------------------------------------------------------------
%  第4.6章  常微分方程的数值解法
%-------------------------------------------------------------------------- 
%{  
 matalb内置函数:
    求解函数	            采用方法	                                       适用场合
    ode23	                2阶或3阶Runge-Kutta算法，低精度	                    非刚性
    ode45	                4阶或5阶Runge-Kutta算法，中精度	                    非刚性
    ode113	                Adams算法，精度可到10-3～10-6	            非刚性，计算时间比ode45短
    ode23t	                梯形算法	                                       适度刚性
    ode15s	                Gear's反向数值微分算法，中精度	刚性
    ode23s	                2阶Rosebrock算法，低精度	                刚性，当精度较低时，计算时间比ode15s短
    ode23tb	                梯形算法，低精度	                        刚性，当精度较低时，计算时间比ode15s短

刚性问题:
    有一类常微分方程，其解的分量有的变化很快，有的变化很慢，且相差悬殊，这就是所谓的刚性问题(Stiff)。
    对于刚性问题，数值解算法必须取很小步长才能获得满意的结果，导致计算量会大大增加。
    解决刚性问题需要有专门方法。非刚性算法可以求解刚性问题，只不过需要很长的计算时间。
%}


%求解微分方程初值问题，并与精确解y1=sqrt(t+1)+1;进行比较
f=@(t,y) (y^2-t-2)/4/(t+1); 
[t,y]=ode23(f,[0,10],2);
y1=sqrt(t+1)+1; 
subplot(2, 1, 1)
plot(t,y,'b--',t,y1,'r')
title('ode23 2阶或3阶Runge-Kutta算法');

f1 =@(t,y) (y^2-t-2)/4/(t+1); 
[t,yf]=ode45(f1,[0,10],2);
y2=sqrt(t+1)+1; 
subplot(2, 1, 2)
plot(t,yf,'b--',t,y2,'r')
title('ode45 4阶或5阶Runge-Kutta算法');



%{
一般的高阶微分方程通过引用新的变量，化为一阶微分方程
MATLAB提供了多个求常微分方程初值问题数值解的函数，一般调用格式为：
 [t,y]=solver(filename,tspan,y0,option)
 t和y分别给出时间向量和相应的数值解。
 solver为求常微分方程数值解的函数。
 filename是定义f(t,y)的函数名，该函数必须返回一个列向量。
 tspan形式为[t0，tf]，表示求解区间。y0是初始状态向量。
 Option是可选参数，用于设置求解属性，常用的属性包括相对误差值RelTol(默认值是10-3)和绝对误差值AbsTol(默认值是10-6)。
%}


% 调用函数求解微分方程组
tspan = [0,12];  %求解范围
options = odeset('RelTol',1e-4,'AbsTol',[1e-4 1e-4 1e-5]);%用于设置求解属性
y0 = [0;1;1];  %初值
[T,Y] = ode45(@odefun,tspan,y0,options);%函数调用
figure(2)
plot(T,Y(:,1),'b-',T,Y(:,2),'k-.',T,Y(:,3),'r.')%绘图